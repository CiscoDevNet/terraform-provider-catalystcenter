// Copyright Â© 2023 Cisco Systems, Inc. and its affiliates.
// All rights reserved.
//
// Licensed under the Mozilla Public License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://mozilla.org/MPL/2.0/
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: MPL-2.0

// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

//template:begin imports
import (
	"context"
	"fmt"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
	cc "github.com/netascode/go-catalystcenter"
)

//template:end imports

//template:begin model

// Ensure the implementation satisfies the expected interfaces.
var (
	_ datasource.DataSource              = &DeployTemplateDataSource{}
	_ datasource.DataSourceWithConfigure = &DeployTemplateDataSource{}
)

func NewDeployTemplateDataSource() datasource.DataSource {
	return &DeployTemplateDataSource{}
}

type DeployTemplateDataSource struct {
	client *cc.Client
}

func (d *DeployTemplateDataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_deploy_template"
}

func (d *DeployTemplateDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		// This description is used by the documentation generator and the language server.
		MarkdownDescription: "This data source can read the Deploy Template.",

		Attributes: map[string]schema.Attribute{
			"id": schema.StringAttribute{
				MarkdownDescription: "The id of the object",
				Required:            true,
			},
			"template_id": schema.StringAttribute{
				MarkdownDescription: "Main template UUID of versioned template",
				Computed:            true,
			},
			"force_push_template": schema.BoolAttribute{
				MarkdownDescription: "Force Push Template",
				Computed:            true,
			},
			"is_composite": schema.BoolAttribute{
				MarkdownDescription: "Composite template flag",
				Computed:            true,
			},
			"main_template_id": schema.StringAttribute{
				MarkdownDescription: "Main template UUID of versioned template",
				Computed:            true,
			},
			"member_template_deployment_info": schema.StringAttribute{
				MarkdownDescription: "Member Template Deployment Info",
				Computed:            true,
			},
			"target_info": schema.ListNestedAttribute{
				MarkdownDescription: "Target info to deploy template",
				Computed:            true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"host_name": schema.StringAttribute{
							MarkdownDescription: "Hostname of device is required if targetType is MANAGED_DEVICE_HOSTNAME",
							Computed:            true,
						},
						"id": schema.StringAttribute{
							MarkdownDescription: "UUID of target is required if targetType is MANAGED_DEVICE_UUID",
							Computed:            true,
						},
						"params": schema.MapAttribute{
							MarkdownDescription: "Template params/values to be provisioned",
							ElementType:         types.StringType,
							Computed:            true,
						},
						"resource_params": schema.MapAttribute{
							MarkdownDescription: "Resource params to be provisioned",
							ElementType:         types.StringType,
							Computed:            true,
						},
						"type": schema.StringAttribute{
							MarkdownDescription: "Target type of device",
							Computed:            true,
						},
						"versioned_template_id": schema.StringAttribute{
							MarkdownDescription: "Versioned templateUUID to be provisioned",
							Computed:            true,
						},
					},
				},
			},
		},
	}
}

func (d *DeployTemplateDataSource) Configure(_ context.Context, req datasource.ConfigureRequest, _ *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	d.client = req.ProviderData.(*CcProviderData).Client
}

//template:end model

//template:begin read
func (d *DeployTemplateDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var config DeployTemplate

	// Read config
	diags := req.Config.Get(ctx, &config)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	tflog.Debug(ctx, fmt.Sprintf("%s: Beginning Read", config.Id.String()))

	params := ""
	params += "/" + config.Id.ValueString()
	res, err := d.client.Get(config.getPath() + params)
	if err != nil {
		resp.Diagnostics.AddError("Client Error", fmt.Sprintf("Failed to retrieve object, got error: %s", err))
		return
	}

	config.fromBody(ctx, res)

	tflog.Debug(ctx, fmt.Sprintf("%s: Read finished successfully", config.Id.ValueString()))

	diags = resp.State.Set(ctx, &config)
	resp.Diagnostics.Append(diags...)
}

//template:end read
