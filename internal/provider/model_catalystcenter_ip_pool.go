// Copyright Â© 2023 Cisco Systems, Inc. and its affiliates.
// All rights reserved.
//
// Licensed under the Mozilla Public License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://mozilla.org/MPL/2.0/
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: MPL-2.0

// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

//template:begin imports
import (
	"context"

	"github.com/CiscoDevNet/terraform-provider-catalystcenter/internal/provider/helpers"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/tidwall/gjson"
	"github.com/tidwall/sjson"
)

//template:end imports

//template:begin types
type IPPool struct {
	Id             types.String `tfsdk:"id"`
	Name           types.String `tfsdk:"name"`
	IpAddressSpace types.String `tfsdk:"ip_address_space"`
	Type           types.String `tfsdk:"type"`
	IpSubnet       types.String `tfsdk:"ip_subnet"`
	Gateway        types.String `tfsdk:"gateway"`
	DhcpServerIps  types.Set    `tfsdk:"dhcp_server_ips"`
	DnsServerIps   types.Set    `tfsdk:"dns_server_ips"`
}

//template:end types

//template:begin getPath
func (data IPPool) getPath() string {
	return "/dna/intent/api/v1/global-pool"
}

//template:end getPath

//template:begin toBody
func (data IPPool) toBody(ctx context.Context, state IPPool) string {
	body := ""
	if state.Id.ValueString() != "" {
		body, _ = sjson.Set(body, "settings.ippool.0.id", state.Id.ValueString())
	}
	if !data.Name.IsNull() {
		body, _ = sjson.Set(body, "settings.ippool.0.ipPoolName", data.Name.ValueString())
	}
	if !data.IpAddressSpace.IsNull() {
		body, _ = sjson.Set(body, "settings.ippool.0.IpAddressSpace", data.IpAddressSpace.ValueString())
	}
	if !data.Type.IsNull() {
		body, _ = sjson.Set(body, "settings.ippool.0.type", data.Type.ValueString())
	}
	if !data.IpSubnet.IsNull() {
		body, _ = sjson.Set(body, "settings.ippool.0.ipPoolCidr", data.IpSubnet.ValueString())
	}
	if !data.Gateway.IsNull() {
		body, _ = sjson.Set(body, "settings.ippool.0.gateway", data.Gateway.ValueString())
	}
	if !data.DhcpServerIps.IsNull() {
		var values []string
		data.DhcpServerIps.ElementsAs(ctx, &values, false)
		body, _ = sjson.Set(body, "settings.ippool.0.dhcpServerIps", values)
	}
	if !data.DnsServerIps.IsNull() {
		var values []string
		data.DnsServerIps.ElementsAs(ctx, &values, false)
		body, _ = sjson.Set(body, "settings.ippool.0.dnsServerIps", values)
	}
	return body
}

//template:end toBody

//template:begin fromBody
func (data *IPPool) fromBody(ctx context.Context, res gjson.Result) {
	if value := res.Get("response.ipPoolName"); value.Exists() {
		data.Name = types.StringValue(value.String())
	} else {
		data.Name = types.StringNull()
	}
	if value := res.Get("response.ipPoolCidr"); value.Exists() {
		data.IpSubnet = types.StringValue(value.String())
	} else {
		data.IpSubnet = types.StringNull()
	}
	if value := res.Get("response.gateways.0"); value.Exists() {
		data.Gateway = types.StringValue(value.String())
	} else {
		data.Gateway = types.StringNull()
	}
	if value := res.Get("response.dhcpServerIps"); value.Exists() {
		data.DhcpServerIps = helpers.GetStringSet(value.Array())
	} else {
		data.DhcpServerIps = types.SetNull(types.StringType)
	}
	if value := res.Get("response.dnsServerIps"); value.Exists() {
		data.DnsServerIps = helpers.GetStringSet(value.Array())
	} else {
		data.DnsServerIps = types.SetNull(types.StringType)
	}
}

//template:end fromBody

//template:begin updateFromBody
func (data *IPPool) updateFromBody(ctx context.Context, res gjson.Result) {
	if value := res.Get("response.ipPoolName"); value.Exists() && !data.Name.IsNull() {
		data.Name = types.StringValue(value.String())
	} else {
		data.Name = types.StringNull()
	}
	if value := res.Get("response.ipPoolCidr"); value.Exists() && !data.IpSubnet.IsNull() {
		data.IpSubnet = types.StringValue(value.String())
	} else {
		data.IpSubnet = types.StringNull()
	}
	if value := res.Get("response.gateways.0"); value.Exists() && !data.Gateway.IsNull() {
		data.Gateway = types.StringValue(value.String())
	} else {
		data.Gateway = types.StringNull()
	}
	if value := res.Get("response.dhcpServerIps"); value.Exists() && !data.DhcpServerIps.IsNull() {
		data.DhcpServerIps = helpers.GetStringSet(value.Array())
	} else {
		data.DhcpServerIps = types.SetNull(types.StringType)
	}
	if value := res.Get("response.dnsServerIps"); value.Exists() && !data.DnsServerIps.IsNull() {
		data.DnsServerIps = helpers.GetStringSet(value.Array())
	} else {
		data.DnsServerIps = types.SetNull(types.StringType)
	}
}

//template:end updateFromBody

//template:begin isNull
func (data *IPPool) isNull(ctx context.Context, res gjson.Result) bool {
	if !data.Name.IsNull() {
		return false
	}
	if !data.IpAddressSpace.IsNull() {
		return false
	}
	if !data.Type.IsNull() {
		return false
	}
	if !data.IpSubnet.IsNull() {
		return false
	}
	if !data.Gateway.IsNull() {
		return false
	}
	if !data.DhcpServerIps.IsNull() {
		return false
	}
	if !data.DnsServerIps.IsNull() {
		return false
	}
	return true
}

//template:end isNull
