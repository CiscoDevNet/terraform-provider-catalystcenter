---
name: str() # Name of the resource
no_resource: bool(required=False) # Set to true if no resource should be created
no_data_source: bool(required=False) # Set to true if no data source should be created
rest_endpoint: str() # REST endpoint path
get_rest_endpoint: str(required=False) # Override GET REST endpoint path
put_rest_endpoint: str(required=False) # Override PUT REST endpoint path
delete_rest_endpoint: str(required=False) # Override DELETE REST endpoint path
get_no_id: bool(required=False) # Set to true if the GET request does not require an ID
data_source_no_id: bool(required=False) # Set to true if id in data source should be optional
get_from_all: bool(required=False) # Set to true if GET does not support querying individual objects
get_requires_id: bool(required=False) # Set to true if the GET request requires an ID in the URL path
get_extra_query_params: str(required=False) # Additional query parameters for GET request
no_delete: bool(required=False) # Set to true if the DELETE request is not supported
delete_no_id: bool(required=False) # Set to true if the DELETE request does not require an ID
no_update: bool(required=False) # Set to true if the PUT request is not supported
no_read: bool(required=False) # Set to true if the GET request is not supported
no_import: bool(required=False) # Set to true if the resource does not support importing
import_no_id: bool(required=False) # Set to true if import does not require an ID
post_update: bool(required=False) # Set to true if the POST request is used for update
put_create: bool(required=False) # Set to true if the PUT request is used for create
put_delete: bool(required=False) # Set to true if the PUT request is used for delete
update_computed: bool(required=False) # Set to true if the computed attributes should be updated, only relevant if computed is set on one of the attributes
root_list: bool(required=False) # Set to true if the root element of the data structure is a list
no_read_prefix: bool(required=False) # Set to true if it is an Open API endpoint put the response is not embeeded into a "response" element
id_path: str(required=False) # Path to the ID in the response (use "." to access nested elements)
id_from_query_path: str(required=False) # Specify path to ID container if ID is not included in POST response and needs to be resolved via separate GET request
id_from_query_path_attribute: str(required=False) # Specify attribute name of ID, only relevant if "id_from_query_path" option used, default is "id"
id_query_param: str(required=False) # Query parameter used to specify the ID
id_from_attribute: bool(required=False) # Set to true if the ID is derived from an attribute
device_unreachability_warning: bool(required=False) # Set to true if a warning should be displayed for device unreachability instead of error
put_id_include_path: str(required=False) # If PUT needs to have specific JSON path where ID should be inserted
put_id_query_param: str(required=False) # If PUT needs to have specific query parameter where ID should be inserted
put_no_id: bool(required=False) # Set to true if the PUT request does not require an ID
put_update_id: bool(required=False) # Set to true if the PUT request updates the ID
delete_id_query_param: str(required=False) # If DELETE needs to have specific query parameter where ID should be inserted
minimum_version: str(required=False) # Define a minimum supported version
ds_description: str(required=False) # Define a data source description
res_description: str(required=False) # Define a resource description
doc_category: str(required=False) # Define a documentation category
skip_minimum_test: bool(required=False) # Do not perform a "minimum" (only mandatory attributes) test
attributes: list(include('attribute'), required=False) # List of attributes
test_tags: list(str(), required=False) # List of test tags, tests are only executed if an environment variable with one of these tags is configured
test_prerequisites: str(required=False) # HCL code that is included in the acceptance tests to define prerequisites
max_async_wait_time: int(required=False) # Max wait time for async task in the API, in seconds
---
attribute:
  model_name: str(required=False) # Name of the attribute in the model (payload)
  response_model_name: str(required=False) # Name of the attribute in the model (response payload)
  tf_name: str(required=False) # Name of the attribute in the Terraform resource, by default derived from model_name
  type: enum('String', 'Int64', 'Float64', 'Bool', 'List', 'Set', 'Map', required=False) # Type of the attribute
  element_type: enum('String', 'Int64', required=False) # only relevant if type is either 'List' or 'Set'
  data_path: str(required=False) # Path to the attribute in the model structure
  response_data_path: str(required=False) # Path to the attribute in the response model structure
  id: bool(required=False) # Set to true if the attribute is part of the ID
  match_id: bool(required=False) # Set to true if the attribute is used to identify the right element using "get_from_all" option
  reference: bool(required=False) # Set to true if the attribute is a reference being used in the path (URL) of the REST endpoint
  requires_replace: bool(required=False) # Set to true if the attribute update forces Terraform to destroy/recreate the entire resource
  create_query_path: bool(required=False) # Set to true if the attribute is a query path and being used for POST or PUT request
  query_param: bool(required=False) # Set to true if the attribute is a query parameter and being used for GET, POST and PUT requests
  query_param_name: str(required=False) # Name of query param used in request, by default derived from model_name
  delete_query_param: bool(required=False) # Set to true if the attribute is a query parameter and being used for DELETE request. Note: This cannot be used in conjunction with 'delete_id_query_param'
  delete_query_param_name: str(required=False) # Name of query param used in DELETE request, by default derived from model_name
  post_query_param: bool(required=False) # Set to true if the attribute is a query parameter and being used for POST request
  post_query_param_name: str(required=False) # Name of query param used in POST request, by default derived from model_name
  put_query_param: bool(required=False) # Set to true if the attribute is a query parameter and being used for PUT request
  put_query_param_name: str(required=False) # Name of query param used in PUT request, by default derived from model_name
  get_query_param: bool(required=False) # Set to true if the attribute is a query parameter and being used for GET request
  get_query_param_name: str(required=False) # Name of query param used in GET request, by default derived from model_name
  query_param_no_body: bool(required=False) # Set to true if the attribute is a query parameter and not part of the body
  data_source_query: bool(required=False) # Set to true if the attribute is an alternative query parameter for the data source
  mandatory: bool(required=False) # Set to true if the attribute is mandatory
  computed: bool(required=False) # Set to true if the attribute is computed
  write_only: bool(required=False) # Set to true if the attribute is write-only, meaning we cannot read the value
  exclude_from_put: bool(required=False) # Set to true if the attribute should be excluded from the PUT request
  exclude_test: bool(required=False) # Exclude attribute from example (documentation) and acceptance test
  exclude_example: bool(required=False) # Exclude attribute from example (documentation)
  description: str(required=False) # Attribute description
  example: any(str(), int(), bool(), num(), required=False) # Example value for documentation, also used for acceptance test
  enum_values: list(str(), required=False) # List of enum values, only relevant if type is "String"
  min_list: int(required=False) # Minimum number of elements in a list, only relevant if type is "List"
  max_list: int(required=False) # Maximum number of elements in a list, only relevant if type is "List"
  min_int: int(required=False) # Minimum value of an integer, only relevant if type is "Int64"
  max_int: int(required=False) # Maximum value of an integer, only relevant if type is "Int64"
  min_float: num(required=False) # Minimum value of a float, only relevant if type is "Float"
  max_float: num(required=False) # Maximum value of a float, only relevant if type is "Float"
  string_patterns: list(str(), required=False) # List of regular expressions that the string must match, only relevant if type is "String"
  string_min_length: int(required=False) # Minimum length of a string, only relevant if type is "String"
  string_max_length: int(required=False) # Maximum length of a string, only relevant if type is "String"
  default_value: any(str(), int(), bool(), required=False) # Default value for the attribute
  value: any(str(), int(), bool(), required=False) # Hardcoded value for the attribute
  value_condition: str(required=False) # GO condition that must be true for the value to be included in the payload, only relevant if "value" is set
  test_value: str(required=False) # Value used for acceptance test
  minimum_test_value: any(str(), int(), bool(), num(), required=False) # Value used for "minimum" resource acceptance test
  test_tags: list(str(), required=False) # List of test tags, attribute is only included in acceptance tests if an environment variable with one of these tags is configured
  attributes: list(include('attribute'), required=False) # List of attributes, only relevant if type is "List" or "Set"
